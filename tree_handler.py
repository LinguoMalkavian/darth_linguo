#This is a library of utilities to deal with the parse trees generated by the
#stanford core nlp for spanish

import re

#a regular expresion that matches the shape of terminal nodes
terminalshape = re.compile("\(([a-z0]{1,8}) ([A-Za-záéíóúñ]+)\)")
labelshape= re.compile("\(([a-z0-9.]+|ROOT)")

def loadTree (treeString):
    'Takes a string representation of a tree and returns it as a syntactic tree structure'
    #base case, string is the representation of a terminal
    terminalMatch=terminalshape.match(treeString.strip())
    if terminalMatch:
        newNode = Node(terminalMatch.group(1), isTerminal=True,text=terminalMatch.group(2) )
        return newNode
    else :
        #non terminal case, extract kind, do recursive calls on the daughtersand build the node
        daughters=[]
        treeString=treeString.strip()[:-1]
        kind= labelshape.search(treeString.strip()).group(1)
        treeString= labelshape.sub("",treeString,count=1)
        parencount=0
        lastind=0
        for ind in range(len(treeString)):
            char=treeString[ind]
            if char=="(":
                parencount+=1
            elif char == ")":
                parencount =parencount - 1
                if parencount==0:
                    daughters.append(loadTree(treeString[lastind:ind+1]))
                    lastind=ind+1
        newNode= Node(kind,daughters)
        newNode.consolidateText()
        return newNode


class Node :
    def __init__ (self, kind, daughters=[], isTerminal=False,text="" ):
        self.daughters=daughters
        self.kind=kind
        self.isTerminal=isTerminal

        if(isTerminal):
            self.text=text
        else:
            self.text=self.consolidateText()

        self.consolidateMotherhood()
        if kind=="ROOT":
            self.mother=None

    def addDaughter (self, newDaughter):
        self.daughters.append(newDaughter)

    def consolidateText(self):
        if not self.isTerminal:
            return " ".join([d.text for d in self.daughters])
        else:
            return self.text
    def consolidateMotherhood(self):
        for daughter in self.daughters:
            daughter.mother=self
    def getKind(self):
        return self.kind
    def getDaughters(self):
        return self.daughters
    def getMother(self):
        return self.mother
    def getText(self):
        return self.text
